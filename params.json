{
  "name": "GrooCSS",
  "tagline": "GrooCSS - code CSS in Groovy",
  "body": "\r\n[![Build Status](https://snap-ci.com/adamldavis/groocss/branch/master/build_image)](https://snap-ci.com/adamldavis/groocss/branch/master)\r\n[ ![Download](https://api.bintray.com/packages/adamldavis/maven/GrooCSS/images/download.svg) ](https://bintray.com/adamldavis/maven/GrooCSS/_latestVersion)\r\n/ [Gradle Plugin](https://plugins.gradle.org/plugin/org.groocss.groocss-gradle-plugin)\r\n/ [Build Scan](https://scans.gradle.com/s/voi3o46bkjbcg)\r\n\r\n# GrooCSS\r\n\r\nLike [Less](http://lesscss.org/) but without inventing a new language. \r\n\r\nGrooCSS let's you code your CSS in Groovy, using a natural Groovy DSL with code completion if your IDE supports it.\r\n\r\nIt was created by Adam L. Davis (@adamldavis) and inspired by the many other Groovy-based projects out there, like Gradle, Grails, Spock, Ratpack, and of course grooscript.\r\n\r\nIt has the following features:\r\n\r\n- DSL similar to CSS but with camel-case and some modifications to make it valid Groovy.\r\n- Keyframes support.\r\n- Automatically adds -webkit, -ms, -moz, -o extensions! (configurable)\r\n- Color support with rgb, rgba, hex, and named colors\r\n- Font-face support\r\n- Minimization (compress: true)\r\n- charset support\r\n- Support for transforms directly (transformX, etc), \r\n- Support for media blocks \r\n- Math functions (sqrt, sin, cos, toRadians, etc.)\r\n- Element names (div, a, input, span, etc.)\r\n- Unit methods (unit, getUnit, convert, etc.)\r\n- Ability to extend style-groups and add internal\r\n- Pseudo-classes in DSL (nthChild, etc.)\r\n- New ways to configure: Config.builder() or using withConfig\r\n\r\n## New in 0.6\r\n\r\n- Closer to CSS syntax using getAt, putAt, operator-overloading, underscore, methodMissing, and propertyMissing\r\n- Translator to convert from existing CSS\r\n- Available pretty print (using Config)\r\n\r\n## New in 0.7\r\n\r\n- Better pseudo-class support with %\r\n- Measurements are now fully supported including math between different compatible types.\r\n- Added [Gradle Plugin](https://plugins.gradle.org/plugin/org.groocss.groocss-gradle-plugin)\r\n\r\n## Using Gradle with Plugin\r\n\r\nUsing Gradle 2.1 or later, you simply apply the plugin, provide any optional configuration, and provide a list of files to convert.\r\nThe plugin adds a `convertCss` task for converting your groocss files into css. \r\nFor example:\r\n\r\n    plugins {\r\n      id \"org.groocss.groocss-gradle-plugin\" version \"0.7.1\"\r\n    }\r\n    def cssDir = \"$parent.buildDir/../www/css\"\r\n\r\n    groocss { // any config\r\n        addOpera = false\r\n        prettyPrint = true\r\n    }\r\n    groocssfiles { // a list of in/out files\r\n        index {\r\n            inFile = file('index.groocss')\r\n            outFile = file(\"$cssDir/index.css\")\r\n        }\r\n    }\r\n\r\nIf you have a lot of files, `inFile` and `outFile` can be directories (it will assume groocss files end in `.groocss`).\r\n\r\nThere's also a `GroocssTask` available if you want to have finer-grained control. Here's an example using a task:\r\n\r\n    task css(type: org.groocss.GroocssTask, dependsOn: convertCss) {\r\n        conf = new org.groocss.Config(compress: true, addOpera: false)\r\n        inFile = file('index.groocss')\r\n        outFile = file(\"$cssDir/index.css.min\")\r\n    }\r\n\r\n## Using Gradle without Plugin\r\n\r\n    import org.groocss.GrooCSS\r\n\r\n    buildscript {\r\n        repositories { jcenter() }\r\n        dependencies { classpath 'org.groocss:groocss:0.7' }\r\n    }\r\n    task css << {\r\n        def file = file('css/out.css')\r\n        GrooCSS.process {\r\n            // DSL goes here\r\n        }.writeTo(file)\r\n    }\r\n\r\n## Examples\r\n\r\n### Using convert methods\r\n\r\n    import org.groocss.GrooCSS\r\n\r\n    GrooCSS.convertFile('infile.groocss', 'outfile.css')\r\n    //or\r\n    GrooCSS.convert(new File('in'), new File('out'))\r\n\r\n### Styles DSL\r\n\r\n    def myColor = c('#fe33ac')\r\n\r\n    _.box {\r\n      color myColor\r\n      borderColor '#fdcdea'\r\n    }\r\n    _.box ^ div {\r\n      boxShadow '0 0 5px rgba(0, 0, 0, 0.3)'\r\n    }\r\n    table {\r\n        color myColor\r\n    }\r\n    table.myClass {\r\n        color myColor.darker()\r\n    }\r\n    input['class$=\"test\"'] = {\r\n        background yellow\r\n    }\r\n    sg '#formId', {     // sg useful for ID's\r\n        minWidth 100.px // resolves to 100px\r\n    }\r\n    p + div {\r\n        border '1px solid black'\r\n    }\r\n    p.red | a.red { color red } // | => ,\r\n    p >> a { color blue }       //>> => >\r\n    p * a { color blue }        // * => *\r\n    p - a { color blue }        // - => ~(tilde)\r\n    p ^ a { color blue }        // ^ =>  (space)\r\n\r\n### Measurement Math\r\n\r\n    def myWidth = 100.pt + 1.in // converts to pt\r\n    def myDelay = 100.ms + 1.s     // converts to ms\r\n    def mySize = myWidth / 2    // you can multiply/divide with any number\r\n    def doubleSize = myWidth * 2\r\n\r\n### Extending\r\n\r\n    _.warn { color red }\r\n    _.error {\r\n        extend(_.warn) // extend '.warn' also works\r\n        background black\r\n    }\r\n    \r\nProduces:\r\n\r\n    .warn,.error {color: Red;}\r\n    .error {background: Black;}\r\n\r\n### Nesting\r\n\r\n    a {\r\n        color '#000'\r\n        add ':hover', { color blue }\r\n    }\r\n    div {\r\n        add '> p', { color '#eee' }\r\n    }\r\n\r\nProduces:\r\n\r\n    a { color: #000; }\r\n    a:hover { color: Blue; }\r\n    div > p { color: #eee; }\r\n\r\n### Keyframes and Transforms DSL\r\n\r\n    def css = GrooCSS.process(new Config(addWebkit: false, addMoz: false, addOpera: false)) {\r\n    \r\n        keyframes('bounce') {\r\n            40 % {\r\n                translateY(-30.px)\r\n            }\r\n            60 % {\r\n                translateY(-15.px)\r\n            }\r\n            frame([0,20,50,80,100]) {\r\n                translateY(0)\r\n            }\r\n        }\r\n    }\r\n    \r\nProduces:\r\n\r\n    @keyframes bounce {\r\n    40%{transform: translateY(-30px);}\r\n    60%{transform: translateY(-15px);}\r\n    0%, 20%, 50%, 80%, 100%{transform: translateY(0);}\r\n    }\r\n\r\n### Colors\r\n\r\nUse the \"c\", \"clr\", \"rgb\" or \"rgba\" methods to create a color. For example:\r\n\r\n    def css = GrooCSS.process {\r\n        def sea = c('5512ab') //OR rgb(85, 18, 171)\r\n        _.sea {\r\n            color sea.darker()\r\n            background sea.brighter()\r\n            border \"5px solid ${sea.alpha(0.5)}\"\r\n        }\r\n    }\r\n    \r\nYou can also use named colors:\r\n\r\n    _.blue {\r\n        color darkBlue\r\n        background aliceBlue\r\n    }\r\n\r\n### Font-face\r\n\r\n    fontFace {\r\n        fontFamily 'myFirstFont'\r\n        fontWeight 'normal'\r\n        src 'url(sensational.woff)'\r\n    }\r\n    \r\nResolves to:\r\n\r\n    @font-face { font-family: myFirstFont; font-weight: normal; src:url(sensational.woff); }\r\n    \r\n### Custom styles\r\n\r\n\tbody {\r\n\t\tadd style('-webkit-touch-callout', 'none')\r\n\t\tadd style('-webkit-textSize-adjust', 'none')\r\n\t\tadd style('-webkit-user-select', 'none')\r\n\t}\r\n\t\r\n## Compressing (Minimization)\r\n\r\nTo \"compress\" the output (no new-lines), just pass in a Config object:\r\n\r\n    GrooCSS.process(new Config(compress: true))\r\n    //OR\r\n    GrooCSS.convert(new Config(compress: true), infile, outfile)\r\n    //OR\r\n    groocss { compress = true } // using Gradle plugin\r\n\r\n## Media\r\n\r\n    media 'screen', {\r\n        body { width '100%' }\r\n    }\r\n    \r\nProduces:\r\n\r\n    @media screen {\r\n        body { width: 100%; }\r\n    }\r\n\r\n## Pseudo-classes\r\n\r\n    input % hover { color blue }\r\n    li % nthChild('3n') { color blue }\r\n\r\nProduces:\r\n\r\n    input:hover { color: Blue; }\r\n    li:nth-child(3n) { color: Blue; }\r\n\r\n## Config\r\n\r\nThere are three different ways to configure GrooCSS:\r\n\r\n- Using the groovy constructor: new Config(compress: true)\r\n- Using the builder syntax: Config.builder().compress(true).build()\r\n- Using the DSL: GrooCSS.withConfig { noExts().compress().utf8() }.process {}\r\n\r\nOf these options, the third is most recommended.\r\nWith the DSL there are several chainable methods available to easily configure your CSS:\r\n- noExts() - sets all extension flags to false (addOpera, etc.)\r\n- onlyMs(), onlyWebkit(), etc. - sets all extensions flags to false except one.\r\n- utf8() - sets the charset to UTF-8.\r\n- compress() - sets compress flag to true.\r\n\r\n## Converting from CSS\r\n\r\nYou can use the Translator to convert existing CSS into GrooCSS syntax:\r\n\r\n    GrooCSS.convertFromCSS(File inFile, File outFile)\r\n\r\nThis allows you to get started quickly with GrooCSS in existing projects.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}